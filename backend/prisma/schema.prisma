generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownedProjects    Project[] @relation("ProjectOwner")
  projectMembers   ProjectMember[]
  assignedTasks    Task[]    @relation("TaskAssignee")
  createdTasks     Task[]    @relation("TaskCreator")
  comments         Comment[]

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  color       String        @default("#3B82F6")
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  owner    User              @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId  String
  members  ProjectMember[]
  tasks    Task[]

  @@map("projects")
}

model ProjectMember {
  id        String      @id @default(cuid())
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
  @@map("project_members")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  assignee    User?    @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  creator     User     @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId   String
  comments    Comment[]

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task      Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  author    User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String

  @@map("comments")
}

enum Role {
  USER
  ADMIN
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  COMPLETED
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
